import detectEthereumProvider from '@metamask/detect-provider'
import { useContext, useEffect, useState } from 'react'
import { WalletContext } from '../contexts/wallet'
import { Ethereum } from '../domains/type'
import Web3 from 'web3';
import styles from '../styles/Home.module.css'
import Layout from '../components/Layout';
import Head from 'next/head';
import { HANKOCONTRACT, HANKOCONTRACT_ABI } from '../domains/env';
import { ethers } from 'ethers';

let ethereum: Ethereum
if (typeof window !== "undefined") {
  ethereum = (window as any)?.ethereum
}
export default function Home() {
  const [_account, setAccount] = useState<any>()
  const [_walletConnected, setWalletConnected] = useState<any>()
  // const { connectMetamask, account, walletConnected } = useContext(WalletContext)
  const onHandleConnectButton = async () => {
    const provider = await detectEthereumProvider({ mustBeMetaMask: true });
    if (provider && ethereum.isMetaMask) {
      const web3 = new Web3(Web3.givenProvider);
      // web3.eth.defaultChain = "kovan";
      const accounts = await web3.eth.requestAccounts();
      setAccount(accounts[0]);
      setWalletConnected(true)
    }
  }
  useEffect(() => {
    const f = async () => {
      await onHandleConnectButton()
    }
    f()
  }, [])

  const listNFT = async () => {
    if (!HANKOCONTRACT) {
      throw Error('Set HANKOCONTRACT')
    }
    const provider = new ethers.providers.Web3Provider(ethereum)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(
      HANKOCONTRACT,
      HANKOCONTRACT_ABI,
      signer
    )
    await contract
      .listNFT()
      .then((res: any) => {
        console.log(res)
        return res
      })
      .catch((err: any) => {
        console.log(err)
        alert('failed to List NFT')
      })
    return []
  }
  const mint = async (): Promise<void> => {
    if (!HANKOCONTRACT) {
      throw Error('Set HANKOCONTRACT')
    }
    const provider = new ethers.providers.Web3Provider(ethereum)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(
      HANKOCONTRACT,
      HANKOCONTRACT_ABI,
      signer
    )
    await contract
      .mint(await signer.getAddress(), '20230101')
      .then((res: any) => {
        console.log(res)
      })
      .catch((err: any) => {
        console.log(err)
        alert('failed to mint')
      })
  }
  return (
    <Layout>
      <div className={styles.container}>
        <Head>
          <title>Create Next App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <header>
            {_walletConnected ?
              (<p>
                Your address: {_account}
              </p>
              ) :
              (<button
                onClick={() => { onHandleConnectButton() }}
              >
                Metamsk Login
              </button>)
            }

          </header>
          <h1 className={styles.title}>
            hanko
          </h1>

          <button
            onClick={mint}>
            Mint
          </button>
          <button
            onClick={listNFT}>
            ListNFT
          </button>
        </main >

        <footer className={styles.footer}>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Powered by{' '}
          </a>
        </footer>
      </div >
    </Layout>
  )
}
